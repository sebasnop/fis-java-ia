FUNCTION_BLOCK tipper	// Definición de bloque

// El único tipo de variable soportada es REAL

// Definición de las variables de entrada
VAR_INPUT				
        servicio : REAL; RANGE := (0 .. 10);
        comida : REAL; RANGE := (0 .. 10);
END_VAR

// Definición de las variables de salida
VAR_OUTPUT				
        propina : REAL; RANGE := (0 .. 20);
//      otra_var : REAL; RANGE := (A .. B);
END_VAR

// Fuzzificación de la variable de entrada 'servicio'
FUZZIFY servicio
        TERM pobre := gauss 0 1.5; 
        TERM bueno := gauss 5 1.5;
        TERM excelente := gauss 10 1.5;
END_FUZZIFY

// Fuzzificación de la variable de entrada 'comida'
FUZZIFY comida
        TERM rancia := (0, 0) (0, 1) (3, 1) (7, 0);
        TERM deliciosa := (3, 0) (7, 1) (10, 1) (10, 0);
END_FUZZIFY

// Defuzzificación de la variable de salida 'propina'
DEFUZZIFY propina
        TERM baja := trape 0 0 6 10;
        TERM promedio := trian 6 10 14;
        TERM generosa := trape 10 14 20 20;

        METHOD : COG;		// Usa el metodo de 'Centro de Gravedad'
        DEFAULT := 0;		// Valor por defecto si ninguna regla activa el defuzzificador
END_DEFUZZIFY

// Si se tienen mas variables de salida se hace un bloque por cada una
//DEFUZZIFY otra_var
//      .
//      .
//      .
//END_DEFUZZIFY

// Reglas de inferencia
RULEBLOCK No1
        AND : MIN;	// Usa el 'mín' para el 'AND' y por defecto el 'máx' para el 'OR' (operador difuso).
        ACT : MIN;	// Usa el metodo 'min' para la activación/implicación (trunca)
        ACCU : MAX;	// Usa el 'max' para la acumulación/agregación

        RULE 1 : IF (servicio IS pobre) OR (comida IS rancia) THEN propina IS baja;
        RULE 2 : IF (servicio IS bueno) THEN propina IS promedio; 
        RULE 3 : IF (servicio IS excelente) OR (comida IS deliciosa) THEN propina IS generosa;
        RULE 4 : IF (servicio IS pobre) AND (comida IS deliciosa) THEN propina IS promedio;

//      RULE N : IF (var1 IS a) AND ((var2 IS b) AND ((var3 IS c) AND (var4 IS d)))
//      THEN salida1 IS x, salida2 IS y;
END_RULEBLOCK

END_FUNCTION_BLOCK